# Football AI V2 Configuration

# API Keys
api_keys:
  huggingface_token: 
  roboflow_api_key: 

# Models
models:
  # Roboflow models
  player_detection_model_id: "football-players-detection-3zvbc/11"
  field_detection_model_id: "football-field-detection-f07vi/14"  # Fallback if custom model fails
  
  # Custom field detection settings
  use_custom_field_detection: true  # Set to true to use your custom YOLO model
  custom_field_model: "field_pose_640_yolo11s_pose.pt"  # Path to your trained YOLO model
  
  # Ultralytics models
  pose_model: "yolo11n-pose.pt"  # For human pose estimation
  sam_model: "sam2.1_s.pt"
  
  # Team classification model
  siglip_model_path: "google/siglip-base-patch16-224"

# Keypoint mapping for custom YOLO field detection model
# Maps your model's keypoint indices to pitch vertex indices
# Only needed if use_custom_field_detection is true
keypoint_mapping:
  mapping:
    # Example mapping - adjust based on your model's training:
    0: 0    # Model keypoint 0 -> Pitch corner (top-left)
    1: 1    # Model keypoint 1 -> Pitch corner (top-right)
    2: 2    # Model keypoint 2 -> Pitch corner (bottom-right)
    3: 3    # Model keypoint 3 -> Pitch corner (bottom-left)
    4: 4    # Model keypoint 4 -> Center circle
    5: 5    # Model keypoint 5 -> Penalty area left
    6: 6    # Model keypoint 6 -> Penalty area right
    7: 7    # Model keypoint 7 -> Halfway line
    8: 8    # Model keypoint 8 -> Goal left
    9: 9    # Model keypoint 9 -> Goal right
    10: 10  # Model keypoint 10 -> Center spot
    11: 11  # Model keypoint 11 -> Corner left
    12: 12  # Model keypoint 12 -> Corner right
    13: 13  # Model keypoint 13 -> Goal area left
    14: 14  # Model keypoint 14 -> Goal area right
    15: 15  # Model keypoint 15 -> Penalty spot left
    16: 16  # Model keypoint 16 -> Penalty spot right
    17: 17  # Model keypoint 17 -> Halfway line center
    18: 18  # Model keypoint 18 -> Center circle edge
    19: 19  # Model keypoint 19 -> Penalty area left edge
    20: 20  # Model keypoint 20 -> Penalty area right edge
    21: 21  # Model keypoint 21 -> Goal area left edge
    22: 22  # Model keypoint 22 -> Goal area right edge
    23: 23  # Model keypoint 23 -> Corner left edge
    24: 24  # Model keypoint 24 -> Corner right edge
    25: 25  # Model keypoint 25 -> Goal left edge
    26: 26  # Model keypoint 26 -> Goal right edge
    27: 27  # Model keypoint 27 -> Penalty spot left edge
    28: 28  # Model keypoint 28 -> Penalty spot right edge
    29: 29  # Model keypoint 29 -> Halfway line center edge
    30: 30  # Model keypoint 30 -> Center circle edge left
    31: 31  # Model keypoint 31 -> Center circle edge right
    # Add more mappings as needed for penalty areas, center circle, etc.
    # Run keypoint_mapping_helper.py to visualize and create proper mapping

# Detection settings
detection:
  confidence_threshold: 0.6
  keypoint_confidence_threshold: 0.7

# Pose estimation settings for hybrid approach
pose_estimation:
  # Confidence threshold for pose detection (lowered for small players)
  confidence_threshold: 0.5  # 20% confidence to catch small distant players
  
  # Individual box pose estimation settings
  box_padding_ratio: 0.3  # 30% padding around detection boxes
  min_padding_pixels: [20, 30]  # Minimum padding [width, height] in pixels
  
  # Pose smoothing settings to reduce flickering
  smoothing:
    enable: true          # Enable temporal pose smoothing
    window_size: 2        # Number of frames to average (3-7 recommended)
    
  # Enable detailed pose logging
  enable_logging: true


# Resolution settings for different models
resolution:
  object_detection: [1280, 1280]    # Player/ball detection (increased for better small player detection)
  pose_estimation: [640, 640]       # Human pose (good balance of speed/accuracy)
  segmentation: [1280, 1280]        # SAM segmentation
  field_detection: [640, 640]       # Field keypoints
  output: [1920, 1280]              # Output video resolution

# Video settings
video:
  input_path: "videos/football.mp4"
  output_path: "output/result.mp4"
  stride: 1  # Process every nth frame

# Display settings
display:
  team_colors:
    team_1: "#0066FF"  # Bright blue
    team_2: "#FF0066"  # Bright red/pink
  referee_color: "#FFD700"  # Gold
  ball_color: "#FFFFFF"     # White
  
  # Feature toggles
  show_pose: true
  show_segmentation: false
  segmentation_alpha: 0.6

# Possession detection
possession_detection:
  enable: true
  proximity_threshold: 100  # pixels

# Performance
performance:
  device: "cuda"  # "cuda" or "cpu"

# Debug settings 
debug:
  verbose_field_detection: false     # Reduced logging for cleaner output
  verbose_transformer: false         # Reduced logging for cleaner output
  verbose_pose_estimation: false      # Enable pose estimation logging